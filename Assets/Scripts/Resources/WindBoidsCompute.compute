#pragma kernel SimulateBoids
static const float PI = 3.14159265f;

struct Boid {
    //Groups flock to eachother but continue to avoid other group
    uint group;

    float2 position;
    float2 velocity;

    float2 flockHeading;
    float2 flockCentre;
    float2 seperationHeading;

    int numFlockmates;
};

RWStructuredBuffer<Boid> _BoidData;
uint2 _TextureDimensions;

//Simulation settings
float _DetectionDistance;
float _AvoidDistance;
float _DetectionAngle;
uint _BoidCount;

//Movement settings
float _Speed;
float _MaxSpeed;
float _MinSpeed;
float _MaxSteerForce;

float _AlignmentWeight;
float _CohesionWeight;
float _SeperationWeight;
float _DifferentGroupSeperationWeight;


float2 ClampMagnitude(float2 v, float max){
    float l = length(v);
    if(l > max) return normalize(v) * max;
    return v;
}

float2 ClampMagnitude(float2 v, float min, float max){
    float l = length(v);
    if(l < min) return normalize(v) * min;
    return ClampMagnitude(v, max);
}

float2 GetWeightedSteer(uint3 id, float2 dir, float weight){
    float2 steer = normalize(dir) * _MaxSpeed - _BoidData[id.x].velocity;

    //Clamp steer force
    steer = ClampMagnitude(steer, _MaxSteerForce);

    return steer * weight;
}

//Handling moving and wrapping the boids position
void MoveBoid(uint3 id){
    //Move
    _BoidData[id.x].position += _BoidData[id.x].velocity * _Speed;

    //Handling wrapping around the texture
    //x wrapping
    if(_BoidData[id.x].position.x < 0) _BoidData[id.x].position.x += _TextureDimensions.x;
    else if(_BoidData[id.x].position.x > (float)_TextureDimensions.x) _BoidData[id.x].position.x -= _TextureDimensions.x;
    //y wrapping
    if(_BoidData[id.x].position.y < 0) _BoidData[id.x].position.y += _TextureDimensions.y;
    else if(_BoidData[id.x].position.y > (float)_TextureDimensions.y) _BoidData[id.x].position.y -= _TextureDimensions.y;
}

//Steer boid using corresponding weights
void SteerBoid(uint3 id){
    float2 acceleration = float2(0, 0);

    //Flock calculation
    if(_BoidData[id.x].numFlockmates != 0){
        float2 flockCentre = _BoidData[id.x].flockCentre / _BoidData[id.x].numFlockmates;
        float2 offsetToFlockCentre = flockCentre - _BoidData[id.x].position;

        float2 alignmentAccel = GetWeightedSteer(id, _BoidData[id.x].flockHeading, _AlignmentWeight);
        float2 cohesionAccel = GetWeightedSteer(id, offsetToFlockCentre, _CohesionWeight);
        float2 seperationAccel = GetWeightedSteer(id, _BoidData[id.x].seperationHeading, _SeperationWeight);

        acceleration += alignmentAccel;
        acceleration += cohesionAccel;
        acceleration += seperationAccel;
    }

    _BoidData[id.x].velocity += acceleration;

    //Clamp velocity
    _BoidData[id.x].velocity = ClampMagnitude(_BoidData[id.x].velocity, _MinSpeed, _MaxSpeed);
    
}

float4 c;

//Detect neighbours
void Detect(uint3 id){
    //Loop over every boid
    for(uint i = 0; i < _BoidCount; i++){
        //Boid being checked is same as currently processed one
        if(i == id.x) continue;

        //(accounts for wrapping by looping through each position it can be in (kinda slow but works))
        //I dont think this works :/
        bool found = 0;
        for(int a = -1; a <= 1; a++){
            for(int b = -1; b <= 1; b++){
                float2 checkPos = _BoidData[i].position + (_TextureDimensions * float2(a, b));

                float2 direction = checkPos - _BoidData[id.x].position;
                float distToBoid = distance(checkPos, _BoidData[id.x].position);

                //Compare square distance (accounts for wrapping by looping through each position it can be in (kinda slow but works))
                if(distToBoid * distToBoid <= _DetectionDistance * _DetectionDistance){

                    bool sameGroup = _BoidData[i].group == _BoidData[id.x].group;
                    float2 offsetToBoid = checkPos - _BoidData[id.x].position;
                    float sqrDist = (offsetToBoid.x * offsetToBoid.x + offsetToBoid.y * offsetToBoid.y);

                    //Avoidance
                    float diffGroupMulti = 1;
                    if(!sameGroup) diffGroupMulti = _DifferentGroupSeperationWeight;

                    if(sqrDist < _AvoidDistance * _AvoidDistance) _BoidData[id.x].seperationHeading -= (offsetToBoid / sqrDist) * diffGroupMulti;

                    //Normalised to remove bottom half of equaltion
                    //float2 cur = normalize(_BoidData[i].velocity);    //the bane of my existence
                    float2 cur = normalize(_BoidData[id.x].velocity);   //fixed :smile:
                    float2 target = normalize(offsetToBoid);
            
                    //Expensive
                    float offsetAngle = acos(dot(cur, target));
            
                    //Detected in vision
                    if(offsetAngle < _DetectionAngle / 2 && sameGroup){
                        //Flock changes
                        _BoidData[id.x].numFlockmates += 1;
                        _BoidData[id.x].flockHeading += normalize(_BoidData[i].velocity);
                        _BoidData[id.x].flockCentre += _BoidData[i].position;
                    }
                    found = 1;
                    break;
                }
            }
            if(found) break;
        }
    }
}

[numthreads(64,1,1)]
void SimulateBoids (uint3 id : SV_DispatchThreadID)
{
    if(!(id.x < _BoidCount)) return;

    //Reset flock values
    _BoidData[id.x].numFlockmates = 0;
    _BoidData[id.x].flockHeading = 0;
    _BoidData[id.x].flockCentre = 0;
    _BoidData[id.x].seperationHeading = normalize(_BoidData[id.x].velocity);

    MoveBoid(id);
    Detect(id);
    SteerBoid(id);
}