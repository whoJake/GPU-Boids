#pragma kernel DrawWind

struct Boid {
    uint group;

    float2 position;
    float2 velocity;

    float2 flockHeading;
    float2 flockCentre;
    float2 seperationHeading;

    int numFlockmates;
};

RWStructuredBuffer<Boid> _BoidInput;
Texture2D<float4> _LastFrame;

float _MinMagnitude;
float _MaxMagnitude;

float _DrawRadius;

uint2 _TextureDimensions;

RWTexture2D<float4> _WindOutput;

float2 ClampMagnitude(float2 v, float max){
    float l = length(v);
    if(l > max) return normalize(v) * max;
    return v;
}

float2 ClampMagnitude(float2 v, float min, float max){
    float l = length(v);
    if(l < min) return normalize(v) * min;
    return ClampMagnitude(v, max);
}

float invLerp(float a, float b, float val){
  return (val - a) / (b - a);
}
/*
*   Takes boids as input and draws them onto the render target
*   Also takes brush size into account and at the moment, colours them based on their velocity
*/
[numthreads(64,1,1)]
void DrawWind (uint3 id : SV_DispatchThreadID)
{
    int2 basePos = (int2)_BoidInput[id.x].position.xy;

    for(int a = -_DrawRadius; a <= _DrawRadius; a++){
        for(int b = -_DrawRadius; b <= _DrawRadius; b++){

            //Ensure circle is drawn
            if(length(int2(a, b)) > _DrawRadius) continue;

            //Fade brush towards the edge
            float strength = (_DrawRadius / length(int2(a, b)));

            int editX = (basePos.x + a) % _TextureDimensions.x;
            int editY = (basePos.y + b) % _TextureDimensions.y;
            uint2 edit = uint2(editX, editY);


            float4 lastFrameValue = _LastFrame[edit.xy];
            float2 lastFrameVelocity = float2(lastFrameValue.r, lastFrameValue.g) * lerp(_MinMagnitude, _MaxMagnitude, lastFrameValue.b) * lerp(0, 1, lastFrameValue.a);

            float2 velocity =_BoidInput[id.x].velocity;
            float2 newVelocity = lastFrameVelocity + velocity;

            float2 newVelocityNorm = normalize(newVelocity);

            float r = (newVelocityNorm.x + 1) / 2;
            float g = (newVelocityNorm.y + 1) / 2;
            float b = invLerp(_MinMagnitude, _MaxMagnitude, length(ClampMagnitude(newVelocity, _MinMagnitude, _MaxMagnitude)));
            float a = strength;
            _WindOutput[edit.xy] = float4(r, g, b, strength);

        }
    }
}
